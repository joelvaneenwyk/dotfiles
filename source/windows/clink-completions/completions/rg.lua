------------------------------------------------------------------------------
-- RG

local function try_require(module)
    local r
    pcall(function() r = require(module) end)
    return r
end

try_require("arghelper")

local rg_fieldcontextseparator = clink.argmatcher():addarg({})
local rg_maxdepth = clink.argmatcher():addarg({})
local rg_beforecontext = clink.argmatcher():addarg({})
local rg_maxfilesize = clink.argmatcher():addarg({})
local rg_pathseparator = clink.argmatcher():addarg({})
local rg_generate = clink.argmatcher():addarg({"man", "complete-bash", "complete-zsh", "complete-fish", "complete-powershell"})
local rg_colors = clink.argmatcher():addarg({})
local rg_hostnamebin = clink.argmatcher():addarg({"(__fish_complete_command)"})
local rg_context = clink.argmatcher():addarg({})
local rg_regexsizelimit = clink.argmatcher():addarg({})
local rg_iglob = clink.argmatcher():addarg({})
local rg_encoding = clink.argmatcher():addarg({})
local rg_dfasizelimit = clink.argmatcher():addarg({})
local rg_color = clink.argmatcher():addarg({"never", "auto", "always", "ansi"})
local rg_preglob = clink.argmatcher():addarg({})
local rg_aftercontext = clink.argmatcher():addarg({})
local rg_engine = clink.argmatcher():addarg({"default", "pcre2", "auto"})
local rg_type = clink.argmatcher():addarg({"(rg", "--type-list", "|", "string", "replace", ":", "t)"})
local rg_file = clink.argmatcher():addarg({})
local rg_maxcolumns = clink.argmatcher():addarg({})
local rg_ignorefile = clink.argmatcher():addarg({})
local rg_glob = clink.argmatcher():addarg({})
local rg_typeclear = clink.argmatcher():addarg({})
local rg_typeadd = clink.argmatcher():addarg({})
local rg_typenot = clink.argmatcher():addarg({"(rg", "--type-list", "|", "string", "replace", ":", "t)"})
local rg_replace = clink.argmatcher():addarg({})
local rg_threads = clink.argmatcher():addarg({})
local rg_fieldmatchseparator = clink.argmatcher():addarg({})
local rg_maxcount = clink.argmatcher():addarg({})
local rg_sortr = clink.argmatcher():addarg({"none", "path", "modified", "accessed", "created"})
local rg_contextseparator = clink.argmatcher():addarg({})
local rg_sort = clink.argmatcher():addarg({"none", "path", "modified", "accessed", "created"})
local rg_pre = clink.argmatcher():addarg({"(__fish_complete_command)"})
local rg_regexp = clink.argmatcher():addarg({})
local rg_hyperlinkformat = clink.argmatcher():addarg({})

clink.argmatcher("rg")
:adddescriptions({
  ["--only-matching"] = { "Print only matched parts of a line." },
  ["--quiet"] = { "Do not print anything to stdout." },
  ["--ignore-case"] = { "Case insensitive search." },
  ["--multiline-dotall"] = { "Make '.' match line terminators." },
  ["-A"] = { " arg", "Show NUM lines after each match." },
  ["--after-context"] = { " arg", "Show NUM lines after each match." },
  ["-h"] = { "Show help output." },
  ["-a"] = { "Search binary files as if they were text." },
  ["--ignore-parent"] = { "Don't use ignore files in parent directories." },
  ["--ignore-global"] = { "Don't use global ignore files." },
  ["--no-hidden"] = { "Search hidden files and directories." },
  ["-I"] = { "Never print the path with each matching line." },
  ["--colors"] = { " arg", "Configure color settings and styles." },
  ["--no-auto-hybrid-regex"] = { "(DEPRECATED) Use PCRE2 if appropriate." },
  ["--ignore-file-case-insensitive"] = { "Process ignore files case insensitively." },
  ["--json"] = { "Show search results in a JSON Lines format." },
  ["--passthru"] = { "Print both matching and non-matching lines." },
  ["--type-list"] = { "Show all supported file types." },
  ["--messages"] = { "Suppress some error messages." },
  ["--line-number"] = { "Show line numbers." },
  ["-0"] = { "Print a NUL byte after file paths." },
  ["--generate"] = { " arg", "Generate man pages and completion scripts." },
  ["--no-max-columns-preview"] = { "Show preview for lines exceeding the limit." },
  ["--no-one-file-system"] = { "Skip directories on other file systems." },
  ["-i"] = { "Case insensitive search." },
  ["--pre"] = { " arg", "Search output of COMMAND for each PATH." },
  ["--no-ignore-parent"] = { "Don't use ignore files in parent directories." },
  ["--no-byte-offset"] = { "Print the byte offset for each matching line." },
  ["-q"] = { "Do not print anything to stdout." },
  ["-H"] = { "Print the file path with each matching line." },
  ["--crlf"] = { "Use CRLF line terminators (nice for Windows)." },
  ["--unrestricted"] = { "Reduce the level of \"smart\" filtering." },
  ["--word-regexp"] = { "Show matches surrounded by word boundaries." },
  ["--context-separator"] = { " arg", "Set the separator for contextual chunks." },
  ["--hidden"] = { "Search hidden files and directories." },
  ["--smart-case"] = { "Smart case search." },
  ["-C"] = { " arg", "Show NUM lines before and after each match." },
  ["--pre-glob"] = { " arg", "Include or exclude files from a preprocessor." },
  ["--no-include-zero"] = { "Include zero matches in summary output." },
  ["--no-config"] = { "Never read configuration files." },
  ["--null-data"] = { "Use NUL as a line terminator." },
  ["-c"] = { "Show count of matching lines for each file." },
  ["--path-separator"] = { " arg", "Set the path separator for printing paths." },
  ["--max-count"] = { " arg", "Limit the number of matching lines." },
  ["--max-depth"] = { " arg", "Descend at most NUM directories." },
  ["--byte-offset"] = { "Print the byte offset for each matching line." },
  ["--color"] = { " arg", "When to use color." },
  ["--field-match-separator"] = { " arg", "Set the field match separator." },
  ["--text"] = { "Search binary files as if they were text." },
  ["-."] = { "Search hidden files and directories." },
  ["--ignore-files"] = { "Don't use --ignore-file arguments." },
  ["--case-sensitive"] = { "Search case sensitively (default)." },
  ["--help"] = { "Show help output." },
  ["-B"] = { " arg", "Show NUM lines before each match." },
  ["--no-ignore-global"] = { "Don't use global ignore files." },
  ["--no-heading"] = { "Print matches grouped by each file." },
  ["--auto-hybrid-regex"] = { "(DEPRECATED) Use PCRE2 if appropriate." },
  ["--max-filesize"] = { " arg", "Ignore files larger than NUM in size." },
  ["--ignore-exclude"] = { "Don't use local exclusion files." },
  ["--debug"] = { "Show debug messages." },
  ["-s"] = { "Search case sensitively (default)." },
  ["--line-buffered"] = { "Force line buffering." },
  ["--no-messages"] = { "Suppress some error messages." },
  ["--files-with-matches"] = { "Print the paths with at least one match." },
  ["--no-text"] = { "Search binary files as if they were text." },
  ["--no-sort-files"] = { "(DEPRECATED) Sort results by file path." },
  ["-E"] = { " arg", "Specify the text encoding of files to search." },
  ["--hyperlink-format"] = { " arg", "Set the format of hyperlinks." },
  ["--vimgrep"] = { "Print results im a vim compatible format." },
  ["--max-columns"] = { " arg", "Omit lines longer than this limit." },
  ["--sort-files"] = { "(DEPRECATED) Sort results by file path." },
  ["--pcre2-unicode"] = { "(DEPRECATED) Disable Unicode mode for PCRE2." },
  ["--multiline"] = { "Enable searching across multiple lines." },
  ["--no-ignore-files"] = { "Don't use --ignore-file arguments." },
  ["--no-filename"] = { "Never print the path with each matching line." },
  ["--no-stats"] = { "Print statistics about the search." },
  ["--glob-case-insensitive"] = { "Process all glob patterns case insensitively." },
  ["--no-line-number"] = { "Suppress line numbers." },
  ["-U"] = { "Enable searching across multiple lines." },
  ["--count-matches"] = { "Show count of every match for each file." },
  ["--hostname-bin"] = { " arg", "Run a program to get this system's hostname." },
  ["--no-pcre2-unicode"] = { "(DEPRECATED) Disable Unicode mode for PCRE2." },
  ["--version"] = { "Print ripgrep's version." },
  ["--with-filename"] = { "Print the file path with each matching line." },
  ["-V"] = { "Print ripgrep's version." },
  ["--context"] = { " arg", "Show NUM lines before and after each match." },
  ["--search-zip"] = { "Search in compressed files." },
  ["--binary"] = { "Search binary files." },
  ["-M"] = { " arg", "Omit lines longer than this limit." },
  ["--type-clear"] = { " arg", "Clear globs for a file type." },
  ["--type-add"] = { " arg", "Add a new glob for a file type." },
  ["--type-not"] = { " arg", "Do not search files matching TYPE." },
  ["--heading"] = { "Print matches grouped by each file." },
  ["--no-crlf"] = { "Use CRLF line terminators (nice for Windows)." },
  ["--sort"] = { " arg", "Sort results in ascending order." },
  ["--type"] = { " arg", "Only search files matching TYPE." },
  ["-t"] = { " arg", "Only search files matching TYPE." },
  ["--no-trim"] = { "Trim prefix whitespace from matches." },
  ["--file"] = { " arg", "Search for patterns from the given file." },
  ["-p"] = { "Alias for colors, headings and line numbers." },
  ["--trace"] = { "Show trace messages." },
  ["--threads"] = { " arg", "Set the approximate number of threads to use." },
  ["--invert-match"] = { "Invert matching." },
  ["-j"] = { " arg", "Set the approximate number of threads to use." },
  ["-z"] = { "Search in compressed files." },
  ["--stats"] = { "Print statistics about the search." },
  ["--line-regexp"] = { "Show matches surrounded by line boundaries." },
  ["--before-context"] = { " arg", "Show NUM lines before each match." },
  ["--sortr"] = { " arg", "Sort results in descending order." },
  ["-T"] = { " arg", "Do not search files matching TYPE." },
  ["--replace"] = { " arg", "Replace matches with the given text." },
  ["-S"] = { "Smart case search." },
  ["-m"] = { " arg", "Limit the number of matching lines." },
  ["--no-json"] = { "Show search results in a JSON Lines format." },
  ["-b"] = { "Print the byte offset for each matching line." },
  ["--no-search-zip"] = { "Search in compressed files." },
  ["--pcre2"] = { "Enable PCRE2 matching." },
  ["--no-column"] = { "Show column numbers." },
  ["-u"] = { "Reduce the level of \"smart\" filtering." },
  ["-L"] = { "Follow symbolic links." },
  ["--stop-on-nonmatch"] = { "Stop searching after a non-match." },
  ["-r"] = { " arg", "Replace matches with the given text." },
  ["--pretty"] = { "Alias for colors, headings and line numbers." },
  ["--unicode"] = { "Disable Unicode mode." },
  ["--regex-size-limit"] = { " arg", "The size limit of the compiled regex." },
  ["--fixed-strings"] = { "Treat all patterns as literals." },
  ["--trim"] = { "Trim prefix whitespace from matches." },
  ["--no-mmap"] = { "Search with memory maps when possible." },
  ["--no-pre"] = { "Search output of COMMAND for each PATH." },
  ["--pcre2-version"] = { "Print the version of PCRE2 that ripgrep uses." },
  ["--no-context-separator"] = { "Set the separator for contextual chunks." },
  ["-F"] = { "Treat all patterns as literals." },
  ["-P"] = { "Enable PCRE2 matching." },
  ["--no-ignore"] = { "Don't use ignore files." },
  ["--no-line-buffered"] = { "Force line buffering." },
  ["-f"] = { " arg", "Search for patterns from the given file." },
  ["--no-block-buffered"] = { "Force block buffering." },
  ["-o"] = { "Print only matched parts of a line." },
  ["--include-zero"] = { "Include zero matches in summary output." },
  ["--no-encoding"] = { "Specify the text encoding of files to search." },
  ["--no-multiline-dotall"] = { "Make '.' match line terminators." },
  ["--null"] = { "Print a NUL byte after file paths." },
  ["--no-ignore-messages"] = { "Suppress gitignore parse error messages." },
  ["-d"] = { " arg", "Descend at most NUM directories." },
  ["--ignore-dot"] = { "Don't use .ignore or .rgignore files." },
  ["-n"] = { "Show line numbers." },
  ["--no-multiline"] = { "Enable searching across multiple lines." },
  ["-v"] = { "Invert matching." },
  ["-l"] = { "Print the paths with at least one match." },
  ["--glob"] = { " arg", "Include or exclude file paths." },
  ["--count"] = { "Show count of matching lines for each file." },
  ["--require-git"] = { "Use .gitignore outside of git repositories." },
  ["--no-require-git"] = { "Use .gitignore outside of git repositories." },
  ["--one-file-system"] = { "Skip directories on other file systems." },
  ["--iglob"] = { " arg", "Include/exclude paths case insensitively." },
  ["--mmap"] = { "Search with memory maps when possible." },
  ["--no-glob-case-insensitive"] = { "Process all glob patterns case insensitively." },
  ["--field-context-separator"] = { " arg", "Set the field context separator." },
  ["--no-invert-match"] = { "Invert matching." },
  ["--encoding"] = { " arg", "Specify the text encoding of files to search." },
  ["--ignore-vcs"] = { "Don't use ignore files from source control." },
  ["--no-ignore-vcs"] = { "Don't use ignore files from source control." },
  ["--ignore-messages"] = { "Suppress gitignore parse error messages." },
  ["--no-fixed-strings"] = { "Treat all patterns as literals." },
  ["--no-ignore-file-case-insensitive"] = { "Process ignore files case insensitively." },
  ["-e"] = { " arg", "A pattern to search for." },
  ["--no-ignore-dot"] = { "Don't use .ignore or .rgignore files." },
  ["--files-without-match"] = { "Print the paths that contain zero matches." },
  ["-g"] = { " arg", "Include or exclude file paths." },
  ["--no-binary"] = { "Search binary files." },
  ["--no-ignore-exclude"] = { "Don't use local exclusion files." },
  ["--dfa-size-limit"] = { " arg", "The upper size limit of the regex DFA." },
  ["--regexp"] = { " arg", "A pattern to search for." },
  ["--ignore"] = { "Don't use ignore files." },
  ["--files"] = { "Print each file that would be searched." },
  ["--block-buffered"] = { "Force block buffering." },
  ["--no-unicode"] = { "Disable Unicode mode." },
  ["--max-columns-preview"] = { "Show preview for lines exceeding the limit." },
  ["-x"] = { "Show matches surrounded by line boundaries." },
  ["--ignore-file"] = { " arg", "Specify additional ignore files." },
  ["-w"] = { "Show matches surrounded by word boundaries." },
  ["--engine"] = { " arg", "Specify which regex engine to use." },
  ["--no-follow"] = { "Follow symbolic links." },
  ["--follow"] = { "Follow symbolic links." },
  ["--column"] = { "Show column numbers." },
  ["-N"] = { "Suppress line numbers." },
  ["--no-pcre2"] = { "Enable PCRE2 matching." },
})
:addflags({
  "-e"..rg_regexp,
  "--regexp"..rg_regexp,
  "-f"..rg_file,
  "--file"..rg_file,
  "-A"..rg_aftercontext,
  "--after-context"..rg_aftercontext,
  "-B"..rg_beforecontext,
  "--before-context"..rg_beforecontext,
  "--binary",
  "--no-binary",
  "--block-buffered",
  "--no-block-buffered",
  "-b",
  "--byte-offset",
  "--no-byte-offset",
  "-s",
  "--case-sensitive",
  "--color"..rg_color,
  "--colors"..rg_colors,
  "--column",
  "--no-column",
  "-C"..rg_context,
  "--context"..rg_context,
  "--context-separator"..rg_contextseparator,
  "--no-context-separator",
  "-c",
  "--count",
  "--count-matches",
  "--crlf",
  "--no-crlf",
  "--debug",
  "--dfa-size-limit"..rg_dfasizelimit,
  "-E"..rg_encoding,
  "--encoding"..rg_encoding,
  "--no-encoding",
  "--engine"..rg_engine,
  "--field-context-separator"..rg_fieldcontextseparator,
  "--field-match-separator"..rg_fieldmatchseparator,
  "--files",
  "-l",
  "--files-with-matches",
  "--files-without-match",
  "-F",
  "--fixed-strings",
  "--no-fixed-strings",
  "-L",
  "--follow",
  "--no-follow",
  "--generate"..rg_generate,
  "-g"..rg_glob,
  "--glob"..rg_glob,
  "--glob-case-insensitive",
  "--no-glob-case-insensitive",
  "--heading",
  "--no-heading",
  "-h",
  "--help",
  "-.",
  "--hidden",
  "--no-hidden",
  "--hostname-bin"..rg_hostnamebin,
  "--hyperlink-format"..rg_hyperlinkformat,
  "--iglob"..rg_iglob,
  "-i",
  "--ignore-case",
  "--ignore-file"..rg_ignorefile,
  "--ignore-file-case-insensitive",
  "--no-ignore-file-case-insensitive",
  "--include-zero",
  "--no-include-zero",
  "-v",
  "--invert-match",
  "--no-invert-match",
  "--json",
  "--no-json",
  "--line-buffered",
  "--no-line-buffered",
  "-n",
  "--line-number",
  "-N",
  "--no-line-number",
  "-x",
  "--line-regexp",
  "-M"..rg_maxcolumns,
  "--max-columns"..rg_maxcolumns,
  "--max-columns-preview",
  "--no-max-columns-preview",
  "-m"..rg_maxcount,
  "--max-count"..rg_maxcount,
  "-d"..rg_maxdepth,
  "--max-depth"..rg_maxdepth,
  "--max-filesize"..rg_maxfilesize,
  "--mmap",
  "--no-mmap",
  "-U",
  "--multiline",
  "--no-multiline",
  "--multiline-dotall",
  "--no-multiline-dotall",
  "--no-config",
  "--no-ignore",
  "--ignore",
  "--no-ignore-dot",
  "--ignore-dot",
  "--no-ignore-exclude",
  "--ignore-exclude",
  "--no-ignore-files",
  "--ignore-files",
  "--no-ignore-global",
  "--ignore-global",
  "--no-ignore-messages",
  "--ignore-messages",
  "--no-ignore-parent",
  "--ignore-parent",
  "--no-ignore-vcs",
  "--ignore-vcs",
  "--no-messages",
  "--messages",
  "--no-require-git",
  "--require-git",
  "--no-unicode",
  "--unicode",
  "-0",
  "--null",
  "--null-data",
  "--one-file-system",
  "--no-one-file-system",
  "-o",
  "--only-matching",
  "--path-separator"..rg_pathseparator,
  "--passthru",
  "-P",
  "--pcre2",
  "--no-pcre2",
  "--pcre2-version",
  "--pre"..rg_pre,
  "--no-pre",
  "--pre-glob"..rg_preglob,
  "-p",
  "--pretty",
  "-q",
  "--quiet",
  "--regex-size-limit"..rg_regexsizelimit,
  "-r"..rg_replace,
  "--replace"..rg_replace,
  "-z",
  "--search-zip",
  "--no-search-zip",
  "-S",
  "--smart-case",
  "--sort"..rg_sort,
  "--sortr"..rg_sortr,
  "--stats",
  "--no-stats",
  "--stop-on-nonmatch",
  "-a",
  "--text",
  "--no-text",
  "-j"..rg_threads,
  "--threads"..rg_threads,
  "--trace",
  "--trim",
  "--no-trim",
  "-t"..rg_type,
  "--type"..rg_type,
  "-T"..rg_typenot,
  "--type-not"..rg_typenot,
  "--type-add"..rg_typeadd,
  "--type-clear"..rg_typeclear,
  "--type-list",
  "-u",
  "--unrestricted",
  "-V",
  "--version",
  "--vimgrep",
  "-H",
  "--with-filename",
  "-I",
  "--no-filename",
  "-w",
  "--word-regexp",
  "--auto-hybrid-regex",
  "--no-auto-hybrid-regex",
  "--no-pcre2-unicode",
  "--pcre2-unicode",
  "--sort-files",
  "--no-sort-files",
})
