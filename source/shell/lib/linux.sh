function configure_linux() {
    if [ "$MYCELIO_ARG_CLEAN" = "1" ] || [ "$MYCELIO_ARG_FORCE" = "1" ]; then
        task_group "Stow: Sterilize Target" stow_packages --delete
    fi

    mkdir -p "$MYCELIO_HOME/.config/fish/functions"

    (
        # Not all platforms support '--relative' so go into target directory first
        cd "$MYCELIO_HOME/.config/fish/functions" || true

        # Link fzf (https://github.com/junegunn/fzf) key bindings after we have tried to install it. We intentionally
        # want to create this before we stow packages since we want to make sure the parent folder is not a symbolic
        # link which would cause problems if running a Docker image on this folder if a symbolic link exists inside it.
        _binding_file="../../../.local/fzf/shell/key-bindings.fish"

        _binding_link="fzf_key_bindings.fish"
        if [ -e "$_binding_file" ]; then
            rm -f "$_binding_link"
            ln -s "$_binding_file" "$_binding_link"
        fi
    )

    (
        # Not all platforms support '--relative' so go into target directory first. Ideally we
        # could just submit this link but on Windows, the symlink needs to be valid when created
        # and since 'base16-irblack.sh' is in a submodule, it is not synced/created until after
        # the repository (including that link) would be created.
        cd "$MYCELIO_ROOT/packages/fish" || true
        rm -f "$MYCELIO_HOME/.base16_theme"
        rm -f ".base16_theme"
        ln -s ".config/base16-shell/scripts/base16-irblack.sh" ".base16_theme"
    )

    _fundle_fish="$MYCELIO_HOME/.config/fish/functions/fundle.fish"
    if [ ! -f "$_fundle_fish" ]; then
        mkdir -p "$MYCELIO_HOME/.config/fish/functions"
        run_task "fundle.get" get_file "$_fundle_fish" "https://git.io/fundle" || true

        if [ -f "$_fundle_fish" ]; then
            chmod a+x "$_fundle_fish"
        fi
    fi

    # Stow packages after we have installed fundle and setup custom links
    if [ "${MYCELIO_ARG_CLEAN:-}" = "1" ]; then
        task_group "Stow: Regenerate Mycelium" stow_packages --restow
    else
        task_group "Stow: Inoculate Mycelium" stow_packages
    fi

    if [ -x "$(command -v fish)" ]; then
        if [ ! -f "$_fundle_fish" ]; then
            log_error "Fundle not installed in home directory: '$MYCELIO_HOME/.config/fish/functions/fundle.fish'"
        else
            if run_task "Install Fundle" fish -c "fundle install"; then
                echo "✔ Installed 'fundle' package manager for fish."
            else
                log_error "Failed to install 'fundle' package manager for fish."
            fi
        fi
    else
        echo "⚠ Skipped fish shell initialization as it is not installed."
    fi

    if [ -x "$(command -v apt-get)" ] && [ -x "$(command -v sudo)" ]; then
        DEBIAN_FRONTEND="noninteractive" run_task_sudo "Remove Intermediate Package Data" \
            apt-get autoremove -y
    fi

    # Remove intermediate files here to reduce size of Docker container layer
    if [ -f "/.dockerenv" ] && [ "$MYCELIO_ARG_CLEAN" = "1" ]; then
        rm -rf "$MYCELIO_TEMP" || true
        sudo rm -rf "/tmp/*" || true
        sudo rm -rf "/usr/tmp/*" || true
        sudo rm -rf "/var/lib/apt/lists/*" || true
        echo "Removed intermediate temporary fails from Docker instance."
    fi

    # Left-over sometimes created by 'micro' text editor
    rm -f "$MYCELIO_ROOT/log.txt" || true

    # Remove intermediate Perl files
    rm -rf "$MYCELIO_ROOT/_Inline"

    return 0
}

function initialize_linux() {
    dotenv="$MYCELIO_HOME/.env"
    if [ ! -f "$dotenv" ]; then
        echo "# Generated by Mycelio dotfiles project." >"$dotenv"
        echo "" >>"$dotenv"
    fi

    if ! grep -q "MYCELIO_ROOT=$MYCELIO_ROOT" "$dotenv"; then
        echo "MYCELIO_ROOT=$MYCELIO_ROOT" >>"$dotenv"
        echo "Added 'MYCELIO_ROOT' to dotenv file: '$dotenv'"
    fi

    task_group "Install Packages" install_packages
    task_group "Install Python" install_python

    if [ ! -d "$MYCELIO_HOME/.asdf" ]; then
        if [ -x "$(command -v git)" ]; then
            run_task "asdf.git.clone" git -c advice.detachedHead=false clone "https://github.com/asdf-vm/asdf.git" "$MYCELIO_HOME/.asdf" --branch "v0.8.1"
        else
            echo "Skipped 'asdf' install. Missing required 'git' tool."
        fi
    fi

    install_stow

    install_go
    install_oh_my_posh
    install_hugo
    install_fzf
    install_powershell
    install_micro_text_editor
}
