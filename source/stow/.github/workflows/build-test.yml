name: 'Build and Test'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint:
    name: "ShellCheck"
    runs-on: ubuntu-latest
    if: always()

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: --external-sources
        with:
          ignore_names: bin doc


  perl_test_matrix:
    name: "[${{ matrix.msys && 'windows-msys-latest' || matrix.platform }}] Perl v${{ matrix.perl }}"
    runs-on: ${{ matrix.platform }}
    if: always()

    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest

        perl:
          - '5.32'
          - '5.14'

        include:
          - platform: ubuntu-latest
            perl: '5.34'

          - platform: ubuntu-latest
            perl: '5.18'

          - platform: ubuntu-latest
            perl: '5.16'

          - platform: windows-latest
            perl: '5.28'
            msys: true

    env:
      # https://cygwin.com/cygwin-ug-net/using-cygwinenv.html
      MSYS: "winsymlinks:native"

      # Default paths but these should be overridden by test scripts
      STOW_TEST_RESULTS: ${{ github.workspace }}/test_results*.xml
      STOW_CPAN_LOGS: ${{ matrix.msys && 'C:\msys64\home\runneradmin\.cpan*\work\**\*.log' || format('{0}/*.log', github.workspace) }}

      # Define variants by platform
      script_extension: ${{ (startsWith(matrix.platform, 'windows') && !matrix.msys) && '.bat' || '.sh' }}

      script_tool: ${{ (startsWith(matrix.platform, 'windows') && !matrix.msys) && 'tools\\' || './tools/' }}

      # Need to specify 'strawberry' on Windows. Can pass 'strawberry' to other platforms as it just falls
      # back to default but it does generate a warning.
      perl_distribution: ${{ startsWith(matrix.platform, 'windows') && 'strawberry' || 'default' }}

    defaults:
      run:
        shell: ${{ matrix.msys && 'msys2 {0}' || ( startsWith(matrix.platform, 'windows') && 'cmd' || 'bash' ) }}
        working-directory: ${{ github.workspace }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          # Get all history so we can generate ChangeLog
          fetch-depth: 0

      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.msys }}
        with:
          msystem: MINGW64
          path-type: minimal
          update: false

      - name: Setup Perl ${{ matrix.perl }}
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}

          # Only applies to Windows and uses fallback for other platforms
          distribution: ${{ env.perl_distribution }}

      - name: Check Environment
        run: ${{ env.script_tool }}stow-environment${{ env.script_extension }}

      - name: Install Dependencies
        run: ${{ env.script_tool }}install-dependencies${{ env.script_extension }}

      - name: Make Stow
        run: ${{ env.script_tool }}make-stow${{ env.script_extension }}

      - name: Run Tests

        # Needed so that the coveralls package knows that we are using GitHub Actions
        # and to look for the secret key, see:
        #   https://github.com/kan/coveralls-perl/blob/master/lib/Devel/Cover/Report/Coveralls.pm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          ${{ env.script_tool }}run-tests${{ env.script_extension }}

      - name: Unix Install
        if: ${{ ! startsWith(matrix.platform, 'windows') }}
        run: |
          ./tools/make-clean.sh

          autoreconf --install
          eval `perl -V:siteprefix`

          # Note: this will complain Test::Output isn't yet installed:
          ./configure --prefix="$siteprefix"

          make

          # But that's OK because we install it here:
          sudo make cpanm

      - name: Unix Distribution
        if: ${{ ! startsWith(matrix.platform, 'windows') }}
        run: |
          make distcheck
          perl Build.PL
          ./Build build
          ./Build distcheck

      - uses: actions/upload-artifact@v2
        if: always()
        name: Upload Logs
        with:
          name: cpanm-logs
          path: ${{ env.STOW_CPAN_LOGS }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: ${{ env.STOW_TEST_RESULTS }}

  public_test_results:
    name: "Publish Unit Tests Results"
    runs-on: ubuntu-latest
    needs:
      - perl_test_matrix

    # The other jobs might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "Stow Test Report"
          path: artifacts/**/*.xml
          reporter: java-junit
