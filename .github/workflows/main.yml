#
# Workflow to validate that dotfiles are setup correct for all supported platforms
#

name: Validate

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main, dev]
    paths-ignore:
      - '*.md'
      - 'setup'
      - 'TODO'
      - 'NEWS'
      - 'LICENSE'
      - 'COPYING'
      - '*.plist'
      - '.gitconfig*'
      - 'META.*'
      - 'THANKS'
      - '.devcontainer/**'
      - '.vscode/**'
  pull_request:
    branches: [main, dev]
    paths-ignore:
      - '*.md'
      - 'setup'
      - 'TODO'
      - 'NEWS'
      - 'LICENSE'
      - 'COPYING'
      - '*.plist'
      - '.gitconfig*'
      - 'META.*'
      - 'THANKS'
      - '.devcontainer/**'
      - '.vscode/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  critical:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Initialize environment
        working-directory: ${{ github.workspace }}
        run: bash setup.sh --clean --yes

      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload Logs
        with:
          name: cpanm-logs-critical
          path: /home/runneradmin/.cpan*/work/**/*.log

  init:
    needs: critical
    strategy:
      fail-fast: false
      matrix:
        platform:
          - macos-latest
          - windows-latest
        include:
          - platform: macos-latest
            launch: bash setup.sh
            logs: /home/runneradmin/.cpan*/work/**/*.log

          # The following are known errors/warnings when running on Windows:
          #
          #   cp: cannot create symbolic link '/home/runneradmin/dots/test/bats/test/fixtures/parallel/setup_file/helper.bash': No such file or directory
          #   cp: cannot create symbolic link '/home/runneradmin/dots/test/bats/test/fixtures/parallel/suite/helper.bash': No such file or directory
          #   cp: cannot create symbolic link '/home/runneradmin/dots/vim/.config/nvim/init.vim': No such file or directory
          - platform: windows-latest
            launch: cmd /c setup.bat

            # https://github.com/msys2/setup-msys2/blob/master/main.js
            logs: C:\Users\runneradmin\.cpan*\work\**\*.log

    # The type of runner that the job will run on
    runs-on: ${{ matrix.platform }}

    # Always run the matrix even if another job fails
    if: always()

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Runs a single command using the runners shell
      - name: Initialize environment
        working-directory: ${{ github.workspace }}
        run: ${{ matrix.launch }} --clean --yes

      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload Logs
        with:
          name: cpanm-logs-${{ matrix.platform }}
          path: ${{ matrix.logs }}

  docker_build:
    runs-on: ubuntu-latest

    # Only build this if the main tasks complete
    needs: init

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Inject GitHub slug variables
        uses: rlespinasse/github-slug-action@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dotfiles
          # Generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: source/docker/Dockerfile.ubuntu
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
